using System;
using System.Collections.Generic;
using System.Linq;
using System.Text;
using System.Threading.Tasks;
using Basic.Reference.Assemblies;
using F0.Benchmarks.Measurers;
using F0.CodeAnalysis;

namespace F0.Benchmarks.CodeAnalysis;

public class IsExternalInitGeneratorBenchmarks
{
	private readonly CSharpIncrementalGeneratorMeasurer<IsExternalInitGenerator> benchmark = new();

	[GlobalSetup]
	public void Setup()
	{
		StringBuilder code = new("namespace Benchmarking;");
		_ = code.AppendLine();

		for (int i = 0; i < 100; i++)
		{
			_ = code.AppendLine()
				.AppendLine($"public class Class{i} {{ public string InitOnlySetter {{ get; init; }} }}")
				.AppendLine($"public struct Struct{i} {{ public string InitOnlySetter {{ get; init; }} }}")
				.AppendLine($"public readonly struct ReadOnlyStruct{i} {{ public string InitOnlySetter {{ get; init; }} }}")
				.AppendLine($"public record Record{i}(string InitOnlySetter);")
				.AppendLine($"public record class ReferenceType{i}(string InitOnlySetter);")
				.AppendLine($"public readonly record struct ValueType{i}(string InitOnlySetter);");
		}

		benchmark.Initialize(code.ToString(), ReferenceAssemblies.NetCoreApp31);
	}

	[Benchmark]
	public object Generate()
		=> benchmark.Invoke();

	[GlobalCleanup]
	public void Cleanup()
	{
		string generated = @"// <auto-generated/>
#nullable enable

namespace System.Runtime.CompilerServices;

internal static class IsExternalInit
{
}
";

		benchmark.Inspect(generated);
	}
}
